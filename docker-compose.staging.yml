
services:
  # SQL Server
  database:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=Tuong191003
    ports:
      - "1434:1433"
    networks:
      - ecommerce-network

  # Redis
  cache:
    image: redis:latest
    ports:
      - "6380:6379"
    networks:
      - ecommerce-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      - "15672:15672"  # Management console
      - "5672:5672"    # AMQP protocol port
    networks:
      - ecommerce-network

  # Admin Service
  admin-service:
    build:
      context: ./services/AdminService
      dockerfile: Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - database
    networks:
      - ecommerce-network

  # User Service
  user-service:
    build:
      context: ./services/UserService
      dockerfile: Dockerfile
    ports:
      - "5002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - database
    networks:
      - ecommerce-network

  # Product Service
  product-service:
    build:
      context: ./services/ProductService
      dockerfile: Dockerfile
    ports:
      - "5003:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - database
      - cache
    networks:
      - ecommerce-network

  # Cart Service
  cart-service:
    build:
      context: ./services/CartService
      dockerfile: Dockerfile
    ports:
      - "5004:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - database
    networks:
      - ecommerce-network

  # Order Service
  order-service:
    build:
      context: ./services/OrderService
      dockerfile: Dockerfile
    ports:
      - "5005:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - database
      - rabbitmq
    networks:
      - ecommerce-network

  # Payment Service
  payment-service:
    build:
      context: ./services/PaymentService
      dockerfile: Dockerfile
    ports:
      - "5006:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - order-service
    networks:
      - ecommerce-network

  # Inventory Service
  inventory-service:
    build:
      context: ./services/InventoryService
      dockerfile: Dockerfile
    ports:
      - "5007:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - database
      - rabbitmq
    networks:
      - ecommerce-network

  # Shipping Service
  shipping-service:
    build:
      context: ./services/ShippingService
      dockerfile: Dockerfile
    ports:
      - "5008:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - order-service
      - rabbitmq
    networks:
      - ecommerce-network

  # Notification Service
  notification-service:
    build:
      context: ./services/NotificationService
      dockerfile: Dockerfile
    ports:
      - "5009:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - rabbitmq
    networks:
      - ecommerce-network

  # Review Rating Service
  review-rating-service:
    build:
      context: ./services/ReviewRatingService
      dockerfile: Dockerfile
    ports:
      - "5010:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - database
    networks:
      - ecommerce-network

  # API Gateway
  api-gateway:
    build:
      context: ./services/APIGateway
      dockerfile: Dockerfile
    ports:
      - "5111:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Staging
    depends_on:
      - admin-service
      - user-service
      - product-service
      - cart-service
      - order-service
      - payment-service
      - inventory-service
      - shipping-service
      - notification-service
      - review-rating-service
    networks:
      - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge
